buildscript {
    project.ext {
        bootVersion = '1.5.16.RELEASE'
//        bootVersion = '2.1.2.RELEASE'
//        logstashLogbackVersion = '4.11'
        logstashLogbackVersion = '5.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.bootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${project.bootVersion}"
    compile "net.logstash.logback:logstash-logback-encoder:${project.logstashLogbackVersion}"

    runtime "org.springframework.boot:spring-boot-starter-tomcat:${project.bootVersion}"

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:"${project.bootVersion}")
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

// Have test task use the test Spring profile if another isn't specified
test {
    systemProperties['spring.profiles.active'] = System.properties['spring.profiles.active'] ?: 'test'
}

task integrationTest(type: Test) {
    systemProperties['spring.profiles.active'] = System.properties['spring.profiles.active'] ?: 'test'
    group = 'verification'
    description = 'Runs integration tests'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Always rerun integration tests
}
// Fully testing the app requires integrationTest to run
check.dependsOn integrationTest
integrationTest.mustRunAfter test // Unit tests first

// Unit & Integration test tasks have different report outputs
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}